Git 与 CVS 面对面
*********************

面对面访谈录
============

**Git：我的提交是原子提交。每次提交实际就是一棵树，而且目录树以及相关的文件对象在版本库中的写入不是在提交过程而是在暂存区更新时完成的。因为我的提交ID本身是一个SHA1哈希值，可以保证数据的完整性。**

CVS：我承认这是我的软肋，一次错误或者冲突的提交会导致部分被提交了，而部分没有提交，版本库完整性被破坏，所以人们才设计出来 Subversion（SVN） 来取代我。

**Git：我的分支和里程碑管理非常快捷。因为我的分支和里程碑就是一个记录提交ID的引用，你的呢？**

CVS：你怎么又提到别人的痛处了！我的分支和里程碑创建速度还是很快的，如果在版本库中只有几个文件的话。当然随着版本库中文件的增增多，在分支、里程碑创建花费的时间也会直线上升，直到忍无可忍。所以人们设计出来 SVN 来取代我。

**Git：其实我不用里程碑都没有关系，因为每一个提交ID就对应于唯一的一个提交状态？**

CVS：这也是我做不到的。我没有全局版本号的概念，而是每一个文件具有单独的版本号变更历史。人们在使用我的时候必须经常的用里程碑（tag）对我的状态进行标识。还需要提醒一句，如果版本库中文件太多，创建里程碑是很耗时的，因为要一一打开每一个版本库中的文件，记录里程碑和文件版本的关系。

**Git：我的工作区很干净。只在工作区的根目录下有一个 `.git` 目录，此外再无其他。**

CVS：我要在工作区的每一个目录下都放置一个 CVS 目录，这个目录下有个 `Entries` 文件很重要，记录了对应工作区文件的检出版本以及时间戳等信息。这样做的好处是可以将工作区移动到任何其他磁盘和目录，依然可以使用，甚至我可以将工作区的一个子目录拿出来，作为独立的工作区。

Git：我也可以将工作区移动到其他磁盘，但是要保证工作区下的 `.git` 目录和工作区一同移动，不能只移动工作区下的一个目录到其他磁盘，那样的话移出的目录就不能工作了。

**Git：我的网络传输效率很高。在和其他版本库交互时，因为对方会告诉我它有什么，我也知道我有什么，通过对缺失对象的打包传输，效率很高。**

CVS：这一点我不行。因为我本地没有文件做对照，所以我在传输的时候不可能做到增量传输。

**Git：我甚至可以不需要网络。因为我在本地拥有完整的版本库，几乎所有操作都是在本地完成。**

CVS：我的操作处处需要网络，如果版本库是在网络中其他服务器上的话。例如：查看日志，查看历史版本都需要花费很长时间等待，如果网速比较慢的话。

**CVS：你的怎么没有更新（update）命令？而且你还有个经常要执行的检出命令（checkout）？而我的检出命令可是只在工作区建立时一次完成的。**

Git：你的更新（update）命令执行的很慢对么？你的更新命令是对通过检出命令（checkout）建立的工作区进行更新。之所以你需要更新是因为你的版本库在远程啊。别忘了我的版本库是在本地，我的每一步操作工作区和版本库都是同步的，所以更新操作就没有存在的必要了。而我的检出（checkout）操作一般是用户切换分支，或者丢弃掉工作区中错误的改动时用到。不过我也有一个比较耗时的网络操作命令叫做 `git fetch` 或者 `git pull` ，这两个操作是从别人的版本库获取他人改动。一般使用我（Git）做团队协作的时候，会部署一个集中共享的版本库，我就从这个共享的版本库执行拉回操作。也也许你（CVS）会觉得 `git fetch` 或者 `git pull` 和你的 `cvs update` 命令更像吧。至于你的 `cvs checkout` 命令，会觉得和我从共享版本库创建本地克隆的 `git clone` 命令很相似。

**CVS：为什么你的检入命令（commit）命令执行的那么快？**

Git：是的，我的检入命令飞一般就执行完了，也是因为版本库就在本地。也许你（CVS）会觉得我的 `git push` 命令更和你的 `cvs commit` 想象，其实这是一个误会。如果我不做本地提交，是不能通过 `git push` 命令将我的本地的提交共享给（推送给）其他版本库的。你（CVS）每一次提交都要和版本库进行网络通讯，而我可以在本地版本库进行多次提交，直到我的主人想和咖啡了才执行一次 `git push` ，将我本地版本库推送给远程版本库。

**CVS：我每一个文件都一个一个版本号，你有么？**

Git：每一个文件一个版本号？这有什么值得夸耀的？我听说你最早是用脚本对 RCS 系统进行封装实现的，所以你每个文件都有一个独立的版本控制，这让你变得很零碎。我听说 IBM ClearCase 也是这样，真糟糕。我的每一次提交都有一个全球唯一的版本号，这样不但是在本地版本库中是唯一的，和其他人的版本库也不会有冲突。

**CVS：我能一次检出一个目录，你好像不能吧？**

Git：所以我有子模组，以及 repo 等第三方工具，可以帮助我把一个大的版本库拆开多个版本库组合来使用啊。

**CVS：我能添加空目录，你好像不能吧！**

Git：是的，我现在还不能记录空目录，但是用户往往在空目录下创建一个隐含文件，并将该隐含文件添加到版本库中，也就实现了空目录添加的功能。你，CVS，目录管理是你的软肋，你很难实现目录的重命名，而目录重命名对我来说是小菜一碟。


命令对照
====================

+---------------+-------------------------------+-------------------------+-------------------------------------+
| 动作          | CVS 命令                      | Git 命令                | 说明                                |
+===============+===============================+=========================+=====================================+
|               |                               |                         |                                     |
+---------------+-------------------------------+-------------------------+-------------------------------------+
