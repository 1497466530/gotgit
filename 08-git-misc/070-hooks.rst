Git 钩子
=========

Git 的钩子脚本位于版本库 `.git/hooks` 目录下，当 Git 执行特定操作时会调用特定的钩子脚本。当版本库通过 `git init` 或者 `git clone` 创建时，会在 `.git/hooks` 目录下创建示例脚本，用户可以参照示例脚本的写法开发适合的钩子脚本。

钩子脚本要设置为可运行，并使用特定的名称。下面分别对可用的钩子脚本逐一介绍：

* applypatch-msg

  该钩子脚本由 `git am` 命令调用。该脚本只有一个参数，即保存提交说明的文件名。如果该脚本运行失败（返回非零值），则 `git am` 命令在应用该补丁之前终止。

  这个钩子脚本可以修改文件中保存的提交说明，以便对提交说明进行规范化以符合项目的标准（如果有的话）。如果提交说明不符合项目标准，脚本直接以非零值退出拒绝提交。

  如果该脚本被启用，还会执行 commit-msg 钩子脚本，如果存在的话。

* pre-applypatch

  该钩子脚本由 `git am` 命令调用。该脚本没有参数，在补丁应用后但尚未提交之前运行。如果该脚本运行失败（返回非零值），则已经应用补丁的工作区文件不会被提交。

  这个脚本可以用于对应用补丁后的工作区进行测试，如果测试没有通过则拒绝提交。

  如果该脚本被启用，还会执行 pre-commit 钩子脚本，如果存在的话。

* post-applypatch

  该钩子脚本由 `git am` 命令调用。该脚本没有参数，在补丁应用并且提交之后运行，因此该钩子脚本不会影响 `git am` 的运行结果，一般用于发送通知。

* pre-commit

  该钩子脚本由 `git commit` 命令调用。可以向该脚本传递 `--no-verify` 参数，此外别无参数。该脚本获取提交说明之前运行。如果该脚本运行失败（返回非零值），Git 提交被终止。

  该脚本主要用于对提交数据的检查，例如可以用于检查是否提交了非ASCII字符命名的文件，以及是否在提交文件中使用了不规范的空白字符等。

* prepare-commit-msg

  该钩子脚本由 `git commit` 命令调用，在默认的提交信息准备完成后但编辑器尚未启动之前运行。

  该脚本有1到3个参数。第一个参数是包含提交说明的文件名。第二个参数是提交说明的来源，可以是 `message` （由 `-m` 或者 `-F` 参数提供），可以是 `template` （如果使用了 `-t` 参数或者由 `commit.template` 配置变量提供），或者是 `merge` （如果提交是一个合并或存在 .git/MERGE_MSG 文件），或者是 `squash` （如果存在 .git/SQUASH_MSG 文件），或者是 `commit` 并跟着一个提交SHA1哈希值（如果使用 `-c` 、 `-C` 或者 `--amend` 参数）。

  如果该脚本运行失败（返回非零值），Git 提交被终止。

  该脚本用于对提交说明进行编辑，并且该脚本不会因为 `--no-verify` 参数被禁用。

  Git 的示例 `prepare-commit-msg` 脚本，可以用于向提交说明中自动嵌入提交者签名，或者将来自 `merge` 的提交说明中的“Conflicts:”去掉。

* commit-msg

  该钩子脚本由 `git commit` 命令调用，可以通过传递 --no-verify 参数而禁用。该脚本有一个参数，即包含提交信息的文件名。如果该脚本运行失败（返回非零值），Git 提交被终止。

  该脚本可以直接修改提交说明，可以用于对提交说明规范化以符合项目的标准（如果有的话）。如果提交说明不符合标准，可以拒绝提交。

  示例 commit-msg 钩子可以检查提交说明中重复出现的 "Signed-off-by" 行，如果发现即终止提交。

* post-commit

  该钩子脚本由 `git commit` 命令调用，不带参数运行，是在提交完成之后被触发执行。

  该钩子脚本不会影响 `git commit` 的运行结果，一般用于发送通知。

* pre-rebase

  该钩子脚本由 `git rebase` 命令调用，用于防止某个分支参与变基。

* post-checkout

  该钩子脚本由 `git checkout` 命令调用，是在完成工作区更新之后触发执行。该钩子脚本有三个参数：前一个HEAD的引用，新HEAD的引用（可能和前一个一样也可能不一样），以及一个标识用于表示此次检出是否是分支检出（分支检出为1，文件检出是0）。该钩子脚本不会影响 `git checkout` 命令的结果。

  该钩子脚本也在 `git clone` 命令执行后被触发，除非使用了 `--no-checkout (-n)` 参数。第一个参数给出的引用是空引用，则第二个和第三个参数都为 1。

  这个钩子一般用于版本库的有效性检查，自动显示和前一个HEAD的差异，或者设置工作区属性。

* post-merge

  该钩子脚本由 `git merge` 命令调用，当在本地版本库完成 `git pull` 操作后触发执行。该钩子脚本有一个参数，标识合并是否是一个压缩合并。该钩子脚本不会影响 `git merge` 命令的结果。如果合并因为冲突而失败，该脚本不会执行。

  该钩子脚本可以与 `pre-commit` 钩子脚本一起实现对工作区目录树属性（如权限/属主/ACL等）的保存和恢复。参见Git源码文件 `contrib/hooks/setgitperms.perl` 中的示例。

* pre-receive

  该钩子脚本由远程版本库的 `git receive-pack` 命令调用，当从本地版本库完成一个推送之后。在远程服务器上开始批量更新引用之前，该钩子脚本被触发执行。该钩子脚本的退出状态决定了更新引用的成功与否。

  该钩子脚本在接收（receive）操作中只执行一次。该脚本不通过命令行传递参数，而是通过标准输入进行传递。通过标准输入传递的每一行的语法格式为：

  ::

    <old-value> <new-value> <ref-name>

  `<old-value>` 是引用更新前保存的老的对象ID， `<new-value>` 是引用即将更新到的对象ID， `<ref-name>` 是引用的全名。当创建一个新引用时， `<old-value>` 是 40 个 0。

  如果该钩子脚本以非零值退出，一个引用也不会更新。如果该脚本正常退出，每一个单独的引用的更新仍有可能被 `update` 钩子所阻止。

  标准输出和标准错误都重定向到在另外一端执行的 `git send-pack` ，所以可以直接通过 `echo` 命令向用户传递信息。

* update

  该钩子脚本由远程版本库的 `git receive-pack` 命令调用，当从本地版本库完成一个推送之后。在远程服务器上更新引用时，该钩子脚本被触发执行。该钩子脚本的退出状态决定了更新引用的成功与否。

  该钩子脚本在每一个引用更新的时候都会执行一次。该脚本有三个参数。

  * 参数1：要更新的引用的名称。
  * 参数2：引用中保存的旧对象名称。
  * 参数3：将要保存到引用中的新对象名称。

  正常退出（返回0）允许引用的更新，而以非零值退出禁止 `git-receive-pack` 更新该引用。

  该钩子脚本可以用于防止对某些引用的强制更新，因为该脚本可以通过检查新旧引用对象是否存在继承关系，从而提供更为细致的“非快进式推送”的授权。

  该钩子脚本也可以用于记录（如用邮件）引用变更历史 `old..new` 。然而因为该脚本不知道整个的分支，所以可能会导致每一个引用发送一封邮件。因此可能 `post-receive` 钩子脚本更适合。

  另外，该脚本可以实现基于路径的授权。

  标准输出和标准错误都重定向到在另外一端执行的 `git send-pack` ，所以可以直接通过 `echo` 命令向用户传递信息。

  Git 提供的示例 update 脚本如果被启用，并将 hooks.allowunannotated 设置为未定义或者 false，会阻止向版本库推送轻量级里程碑。

* post-receive

  该钩子脚本由远程版本库的 `git receive-pack` 命令调用，当从本地版本库完成一个推送之后。当所有引用都更新完毕后，在远程服务器上该钩子脚本被触发执行。

  This hook executes once for the receive operation. It takes no arguments, but gets the same information as the pre-receive hook does on its standard input.
  该钩子脚本在接收（receive）操作中只执行一次。该脚本不通过命令行传递参数，但是像 pre-receive 钩子脚本那样，通过标准输入以相同格式获取信息。

  该钩子脚本不会影响 `git-receive-pack` 的结果，因为调用该脚本时工作已经完成。

  该钩子脚本胜过 `post-update` 脚本之处在于可以获得所有引用的老的和新的值，以及引用的名称。

  标准输出和标准错误都重定向到在另外一端执行的 `git send-pack` ，所以可以直接通过 `echo` 命令向用户传递信息。

  Git 默认提供的 `post-receive` 钩子为空，但是在 `contrib/hooks` 目录下有一个名为 `post-receive-email` 的示例脚本，实现了发送提交邮件的功能。

* post-update

  该钩子脚本由远程版本库的 `git receive-pack` 命令调用，当从本地版本库完成一个推送之后。当所有引用都更新完毕后，在远程服务器上该钩子脚本被触发执行。

  该脚本接收不定长的参数，每一个参数实际上就是已成功更新的引用名。

  该钩子脚本不会影响 `git-receive-pack` 的结果，因此主要用于通知。

  钩子脚本 `post-update` 虽然能够提供那些引用被更新了，但是该脚本不知道引用更新前后的对象SHA1哈希值，所以在这个脚本中不能记录形如 old..new 的引用变更范围。而钩子脚本 `post-receive` 知道更新引用前后的对象ID，因此更适合此种场合。

  Git 默认提供的 `post-update` 脚本会运行 `git update-server-info` 命令，以更新哑协议需要的索引文件。如果通过哑协议共享版本库，应该启用该钩子脚本。

  标准输出和标准错误都重定向到在另外一端执行的 `git send-pack` ，所以可以直接通过 `echo` 命令向用户传递信息。

* pre-auto-gc

  该钩子脚本由 `git gc --auto` 命令调用，不带参数运行，如果以非零值退出会导致 `git gc --auto` 被中断。

* post-rewrite

  该钩子脚本由一些重写提交的命令调用，如 `git commit --amend` 、 `git rebase` ，而 git-filter-branch 当前尚未调用该钩子脚本。

  该脚本的第一个参数用于判断调用来自哪个命令，当前有 `amend` 和 `rebase` 两个取值，也可能将来会有其他更多命令相关参数传递。

  该脚本通过标准输入接收一个重写提交列表，每一行输入的格式如下：

  ::

    <old-sha1> <new-sha1> [<extra-info>]

  前两个是旧的和新的对象 SHA1 哈希值。而 `<extra-info>` 参数是和调用命令相关的。当前该参数为空。

