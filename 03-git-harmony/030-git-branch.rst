Git 分支
********

分支是我们的老朋友了，在第2部分的“Git对象库探秘”和“Git重置”章节中，就早已经从实现原理上理解了 master 分支的存在方式，以及 master 分支的指向是如何随着提交而变化以及如何通过 `git reset` 命令而重置。

在之前的章节中，始终只用到了一个分支：master 分支。本章可以学习到如何创建分支，如何切换到其他分支工作，以及分支之间的合并、变基等。

代码管理之殇
============

分支是代码管理的利器。如果没有有效的分支管理，代码管理就适应不了复杂的开发过程和项目需要。在实际的项目实践中，单一分支的单线开发模式远远不够。

* 成功的软件项目大多要经过多个开发周期，发布多个软件版本。每个已经发布的版本都可能发现 Bug，就需要对历史版本进行更改。
* 有前瞻性的项目管理，新版本的开发往往是和当前版本同步进行的。如果两个版本的开发都混杂在 master 分支，肯定是一场灾难。
* 如果产品要针对不同客户定制，肯定是希望客户越多越好。如果所有的客户定制都混杂在一个分支中，必定带来混乱。如果使用多个分支管理不同的定制，但如果管理不擅，分支之间定制功能的迁移会成为头痛的问题。
* 即便是所有成员都在为同一个项目的同一个版本进行工作，每个人领受任务却不尽相同，有的任务开发周期会很长，有的任务需要对软件架构进行较大的修改，如果所有人都工作在同一分支，就会因为过多过频的冲突导致效率低下。
* 敏捷开发（不管是极限编程XP还是 Scrum 或其他）是最有效的项目管理模式，其最有效的一个实践就是快速迭代、每晚编译。如果不能将项目的各个功能模块的开发通过分支进行隔离，在软件集成上就会遇到困难。

发布分支
--------

下面的示意图描述的是一个采用单线开发的项目，因为缺乏有效的分支管理，造成产品发布后 Bug 不断，往往是修改完一个 Bug，马上发现产生新的问题。




功能分支
--------

下面的示意图描述的也是一个采用单线开发的项目，多个成员都在开发各自负责的模块并使用同一个分支进行交互。有的模块简单就会更快的完成，有的模块复杂就会拖延整个项目，有的模块改动非常大甚至于要对软件架构作出重大调整，于是这个项目就一再的拖延。


卖主分支
--------

下面的示意图描述的是一个基于第三方代码进行定制的项目。一旦第三方发布新的代码后，就将新的第三方代码同步到单独的 vendor 分支（卖主分支）中，并合并到进行定制开发的 master 分支中。

操作Git分支
=============


分支的奥秘
==========


分支的合并
==========


分支的变基
==========


分支管理规范
============



