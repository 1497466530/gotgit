Git 分支
********

分支是我们的老朋友了，在第2部分的“Git对象库探秘”和“Git重置”章节中，就早已经从实现原理上理解了 master 分支的存在方式，以及 master 分支的指向是如何随着提交而变化以及如何通过 `git reset` 命令而重置。

在之前的章节中，始终只用到了一个分支：master 分支。本章可以学习到如何创建分支，如何切换到其他分支工作，以及分支之间的合并、变基等。

代码管理之殇
============

分支是代码管理的利器。如果没有有效的分支管理，代码管理就适应不了复杂的开发过程和项目需要。在实际的项目实践中，单一分支的单线开发模式远远不够。

* 成功的软件项目大多要经过多个开发周期，发布多个软件版本。每个已经发布的版本都可能发现 Bug，就需要对历史版本进行更改。
* 有前瞻性的项目管理，新版本的开发往往是和当前版本同步进行的。如果两个版本的开发都混杂在 master 分支，肯定是一场灾难。
* 如果产品要针对不同客户定制，肯定是希望客户越多越好。如果所有的客户定制都混杂在一个分支中，必定带来混乱。如果使用多个分支管理不同的定制，但管理不擅，分支之间定制功能的迁移会成为头痛的问题。
* 即便是所有成员都在为同一个项目的同一个版本进行工作，每个人领受任务却不尽相同，有的任务开发周期会很长，有的任务需要对软件架构进行较大的修改，如果所有人都工作在同一分支，就会因为过多过频的冲突导致效率低下。
* 敏捷开发（不管是极限编程XP还是 Scrum 或其他）是最有效的项目管理模式，其最有效的一个实践就是快速迭代、每晚编译。如果不能将项目的各个功能模块的开发通过分支进行隔离，在软件集成上就会遇到困难。

发布分支
--------

在 2006 年，我接触到一个项目团队，使用 Subversion 做版本控制。最为困扰项目经理的是刚刚修正产品的一个 Bug，马上又会接二连三的发现新的 Bug。在访谈开发人员，询问开发人员是如何修正 Bug 的时候，开发人员的回答让我大吃一惊：“当发现产品的 Bug 的时候，我要中断当前工作，把我正在开发的新功能的代码注释掉，然后再去修改 Bug，修改好就生成一个 war 包（Java项目）给运维部门，扔到网站上去。”

于是画了下面的一个图，大致描述了这个团队进行 Bug 修正的过程，从中可以很容易的看出问题的端倪。这个图也同样适用于 Git 版本库控制系统。

.. figure:: images/gitbook/branch-release-branch-question.png
   :scale: 80


说明：

* 上图中的图示1，开发者针对功能1做了一个提交，编号 "F1.1" 。这时客户报告产品出现了 Bug。
* 于是开发者匆忙的干了起来，图示2显示了该开发者修正Bug的过程：将已经提交的针对功能1的代码 "F1.1" 注释掉，然后提交一个修正Bug的提交（编号：fix1）。
* 开发者编译出新的产品交给客户，接着开始功能1的开发。图示3显示了开发者针对功能1作出了一个新的提交 "F1.2"。
* 客户再次发现一个 Bug。开发者再次开始 Bug 修正工作。
* 图示4和图示5显示了此工作模式下非常容易在修复的产品中引入新的问题。
* 图示4的问题在于开发者注释功能1的代码时，不小心将 "fix1" 的代码也注释掉了，导致曾经修复的Bug在新版本中重现。
* 图示5的问题在于开发者没有将功能1的代码剔出干净，导致在产品的新版本中引入了不完整和不需要的功能代码。用户可能看到一个新的但是不能使用的菜单项，甚至更糟。

使用版本控制系统的分支功能，可以解决这个团队在Bug修正时遇到的问题。在这种情况下分支专门用于修正 Bug，因此称为 Bugfix 分支。又因为在产品发布后的维护阶段才会只在分支中进行 Bugfix 而不增加新功能，因此此类分支又常常称为发布分支。

下图演示了如何使用发布分支应对 Bug 修正的问题。

.. figure:: images/gitbook/branch-release-branch-answer.png
   :scale: 80

说明：

* 上图中的图示2，可以看到开发者创建了一个发布分支（Bugfix分支），在分支中提交修正代码 "fix1"。注意此分支创建自产品发布时的提交，因此分支中没有包含开发者为新功能所做的提交 "F1.1"。
* 图示3可以看出从发布分支向主线做了一次合并，这是因为在主线也同样存在该 Bug，需要在主线也作出相应的更改。
* 图示4，开发者继续开发，提交了针对功能1的另外一个提交，编号 "F1.2"。这时，客户有报告





功能分支
--------

下面的示意图描述的也是一个采用单线开发的项目，多个成员都在开发各自负责的模块并使用同一个分支进行交互。有的模块简单就会更快的完成，有的模块复杂就会拖延整个项目，有的模块改动非常大甚至于要对软件架构作出重大调整，于是这个项目就一再的拖延。


卖主分支
--------

下面的示意图描述的是一个基于第三方代码进行定制的项目。一旦第三方发布新的代码后，就将新的第三方代码同步到单独的 vendor 分支（卖主分支）中，并合并到进行定制开发的 master 分支中。

操作Git分支
=============


分支的奥秘
==========


分支的合并
==========


分支的变基
==========


分支管理规范
============



