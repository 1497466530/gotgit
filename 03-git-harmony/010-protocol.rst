Git协议
********

上一个部分的各个章节是从个人的视角来欣赏 Git，通过连续的实践不但学习了 Git 的基本使用，还深入的了解了 Git 的奥秘。这些都成为学习本部分内容的基础。从本章开始，不再是一个人的独奏，而是要用团队的视角对 Git 进行研究，要知道团队协作才是 Git 作为版本控制系统要完成的核心功能。团队协作和个人之间有何不同？关键就在于团队成员之间存在着数据交换。数据交换需要协议，就是本章要介绍的内容。数据交换可能会因为冲突造成中断，下一章就专题介绍冲突解决。分支会为数据交换开辟不同的通道，从而减少冲突和混乱的发生，而里程碑可以成为数据往来的关节点、驿站，本部分会用两章的内容本别对分支和里程碑予以介绍。远程版本库注册是 Git 和其它版本库（一个或多个）建立数据交换的方法，会在远程版本库一章予以介绍。在本部分的最后，会介绍通过非版本库交互的方式（线下）如何进行数据交换。

首先来看看数据交换需要的协议。

Git 提供了丰富的协议支持，包括： SSH, GIT, HTTP, HTTPS, FTP, FTPS, RSYNC 以及前面已经看到的本地协议等。各种不同协议的URI写法如下。

+---------------+------------------------------------------------------+--------------------------------------------------------------+
| 协议名称      | 语法格式                                             | 说明                                                         |
+===============+======================================================+==============================================================+
| SSH 协议(1)   | `ssh://[user@]example.com[:port]/path/to/repo.git/`  | 可在URL中设置用户名和端口。                                  |
|               |                                                      | 缺省端口 22。                                                |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| SSH 协议(2)   | `[user@]example.com:path/to/repo.git/`               | 类似 SCP 格式的表示法，更简洁。                              |
|               |                                                      | 可在地址中设置用户名。                                       |
|               |                                                      | 非缺省端口需要通过地址别名方式建立。                         |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| GIT 协议      | `git://example.com[:port]/path/to/repo.git/`         |                                                              |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| HTTP[S] 协议  | `http[s]://example.com[:port]/path/to/repo.git/`     | 兼有智能协议和哑协议                                         |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| FTP[S] 协议   | `ftp[s]://example.com[:port]/path/to/repo.git/`      | 哑协议                                                       |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| RSYNC 协议    | `rsync://example.com/path/to/repo.git/`              | 哑协议                                                       |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| 本地协议(1)   | `file:///path/to/repo.git`                           |                                                              |
+---------------+------------------------------------------------------+--------------------------------------------------------------+
| 本地协议(2)   | `/path/to/repo.git`                                  | 和 `file://` 格式的本地协议类似，有细微差别。                |
|               |                                                      | 例如克隆时不支持浅克隆且克隆时采用直接的硬连接实现。         |
+---------------+------------------------------------------------------+--------------------------------------------------------------+

Git 的协议如果按照其聪明程度划分，可分为两类：智能协议和哑协议。

使用智能协议在通讯时，会在两个通讯的版本库各自一端分别打开两个程序进行数据交换。使用智能协议最直观的印象就是在数据传输过程中会有清晰的进度显示，而且因为是按需传输所以传输量更小，速度更快。下面的图示显示的就是在执行 PULL 和 PUSH 两个最常用的操作时，两个版本库各自启动的辅助程序的情况。

.. figure:: images/gitbook/git-smart-protocol.png
   :scale: 100

上述协议中 SSH, GIT, 以及本地协议（file://）采用智能协议。HTTP 协议需要特殊的配置（用 git-http-backend 配置 CGI）并且客户端需要使用 Git 1.6.6 或更高的版本，才能够使用智能协议。

和智能协议相对的是哑协议。使用这种协议在访问远程版本库的时候，远程版本库不会运行辅助程序，而是完全依靠客户端去主动“发现”。客户端需要访问 `.git/info/refs` 获取当前版本库的引用列表，并根据引用对应的提交ID直接访问对象库目录下的文件。如果对象文件被打包而不以松散对象形式存在，则 Git 客户端还要去访问文件 `.git/objects/info/packs` 以获得打包文件列表，并据此读取完整的打包文件，并从打包文件中获取对象。由此可见哑协议的效率非常之低，甚至会因为要获取一个对象而去访问整个 pack 包。

使用哑协议最直观的感受是：传输速度非常慢，而且传输进度不可见，不知道什么时候才能够完成。上述协议中，像 FTP, RSYNC 协议都是哑协议，对于没有通过 git-http-backend 或类似程序配置 HTTP 服务器提供的也是哑协议。因为哑协议依赖文件 `.git/info/refs` 和 `.git/objects/info/packs` 获取引用和包列表，因此要在版本库的钩子脚本 `post-update` 中设置运行 `git update-server-info` 以确保及时更新相关依赖文件。不过如果不使用哑协议，是否运行 `git update-server-info` 无所谓。

