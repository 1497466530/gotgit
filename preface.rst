前言
####

.. 真相让你自由。代码恰恰能够反映软件的真相。

版本控制是数据维护的艺术。每个人都可以用它记录自己数据变更的历史，在不同的计算机间同步数据。当然，版本控制最初的设计意图以及目前应用最广泛的领域还是软件开发中的源代码管理。

版本控制可以影响程序员的水平，决定公司的生死。我没有丝毫的夸大。

作为一个程序员，您是不是也憧憬着光荣退休的那一天 —— 翻看着自己维护的版本库的历史，给下一代或者下下代讲述您作为程序员的故事。您也可以利用自己维护的版本控制系统来写自传，因为版本控制系统忠实的记录了您做为程序员时时刻刻都做了些什么。您还不知道版本库为何物？或者您认为版本库只应该是公司的特权？抑或怀疑自己能否搭建自己的版本库？那么这本书就是为您而写的。

如果您也如我这般，用版本控制系统（Git）维护文档（FreeMind 或者 reST 格式），日益庞大的文档、日益清晰的脉络，有朝一日您也可以出一本专著。

眼前对您最为紧迫的可能是能否尽快退休，这当然是在您修炼成顶级程序员之后。那么版本控制系统也能帮您这个忙。熟悉版本控制系统，开源软件为您敞开了大门，可以从无数的开源项目中吸取营养和灵感。

版本控制还能决定公司的生死，此言不虚。

作为版本控制的咨询师，我看到太多的团队，因为版本控制系统的管理混乱，导致项目延期，修正的 Bug 重现，客户的问题不能在代码中定位。无论他们用了什么版本控制系统，开源的还是商业的。

而我们公司（北京群英汇信息技术有限公司），也同样经历了代码管理的生死考验。因为公司研发的开发模式主要是基于开源软件的二次开发，在最早使用 Subversion 时（ **集中式版本控制系统** 的典型代表），很自然，使用了 Subversion 卖主分支的模型来管理代码，增加和修改的越多，和开源软件的上游分支也越远。当上游有新版本出来，最早可能用几个小时就把改动迁移过去，但当对上游的改动多达几十甚至上百处，迁移的过程异常痛苦，基本上和重新做一遍差不多。似乎那时只有一个选择：不再和上游合并，不再追踪上游的改动，而这和我们公司的价值观“发动全球智慧为客户创造价值”相背。迷茫之中， **分布式版本控制系统** 飘然而至，原来版本控制还可以这么做。

最早尝试的分布式版本控制系统是 Mercurial/Hg，尤其是当发现 Hg 和 MQ（Hg 的一个插件）这一对儿宝贝的时候，让我们如获至宝。逐渐的，群英汇的版本库都迁移到 Mercurial/Hg 上。但随着公司新的开发人员的加入，新的问题出现了，即一个人使用 Hg+MQ 都很好，但多个人使用时无法协同的弊端也就显现了。于是大胆的采用 Git，并在实践中结合 Topgit 等工具进行代码的管理。再一次，也许是最后一次，我们的代码库迁移到 Git。

最早发现分布式版本控制，源自于我们发现开源软件版本控制大迁移，这场迁移还在进行中。

* MoinMoin 是我们关注的一个开源的维基软件，2006 年，它由 Subversion 迁移到 Mercurial/Hg 做版本控制系统。 [#]_
* Mailman 同样是我们关注的一个开源邮件列表软件。2007 年，它的代码从 Subversion 迁移到 Bazaar。 [#]_
* Linux 采用 Git 做版本控制系统（一点都不奇怪，因为Git就是 Linus Tolvals 开发的）。

  最酷的是，使用 Git 克隆整个 Linux 的源码库，只要花上几十分钟（1M带宽），就可以获得全部（2.2 之后）的 Linux 版本，可以随心所欲的通过本地检出、编译切换到任何版本的内核，而新版本内核出来后，也不必下载内核压缩包，只要更新 Git 库(git pull)，新内核的源码包括之间修改历史全部呈现眼前。

* Android 是最为流行的开源项目之一，因为潜在的市场巨大，已经吸引越来越多的开发者进入这个市场，而 Android 就是用 Git 维护的。

  Android 的版本库异常庞大和复杂，涉及到一百多个 Git 库，甚至开发了两个工具 repo 和 Gerrit，分别提供对多版本库的管理以及更易管理的集中式开发模型。

.. [#] http://moinmo.in/NewVCS
.. [#] http://wiki.list.org/display/DEV/Home

开源软件纷纷倒向分布式版本控制系统的大旗（尤其是Git）的时候，公司也在行动了，尤其是涉及异地团队协同，以及 Android 核心代码定制开发的公司。对于因为代码严格授权需要，并不能采用 Git 的公司，Git 也可以派上用场。这是因为 Git 可以和现在大多数公司部署的 Subversion 很好的协同。即公司的服务器是 Subversion，开发者的客户端使用 Git。而且随着公司代码管理观念上的开放，相信会有更多的公司拥抱 Git。

为什么写本书
************

TODO: 

1. Git技术的美好发展前景；
2. Git的强大功能；
3. 国内读者的需求得不到满足

适用读者
********

每个“电脑人”都可以从 Git 中汲取营养。

**为数据同步困扰的电脑人**

困扰“电脑人”的一个问题是，有太多的数据和太多的电脑设备，数据要在各个电脑（或手持设备）之间进行同步。可能有的人会说：“像 dropbox 一样的网盘可以帮助我呀”。是的，云存储就是在技术逐渐成熟之后应运而生的产品，但是依然解决不了几个问题：多个设备上同时修改造成的冲突；冗余数据传输造成的带宽瓶颈；还有就是没有实现真正的完全的历史变更数据备份。

Git 可以在数据同步上做的更好，甚至只需借助小小的U盘，就可以实现多台电脑数据同步，并且支持自动的冲突解决。在 Git 其他应用一章，会更具体的分析现有云存储方案和展望 Git 在这里领域里的可能应用。

**私有数据的变更记录及长久保存**

非常后悔没有在学习编程的第一天就开始使用版本控制，很多还在学校时写的一些小程序、函数库都丢失了。在使用 CVS, Subversion 对个人数据进行版本控制之后，才开始把每一天的变更历史都保留下来。Git 在这方面可以比 CVS, Subversion, Mercurial/Hg 等做得更好。例如在写到这里的时候，做了如下操作：

  ::

    $ git status -s
     M preface.rst
    $ git add -u
    $ git ci -m "在前言中补充 Git 适用对象"
    [master 531317f] 在前言中补充 Git 适用对象
     1 files changed, 28 insertions(+), 2 deletions(-)
    $ git push
    Counting objects: 9, done.
    Delta compression using up to 2 threads.
    Compressing objects: 100% (5/5), done.
    Writing objects: 100% (5/5), 1.80 KiB, done.
    Total 5 (delta 2), reused 0 (delta 0)
    remote: To git.ossxp:ossxp/gitbook.git
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    remote:    ebb80af..531317f  master -> master
    To git@bj.ossxp.com:ossxp/gitbook.git
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       ebb80af..531317f  master -> master

注意到上面输出中用符号 "`^`" 标记的行了么？当完成提交（git ci），推送到远程服务器（git push）时，因为服务器之间设置了自动同步，于是改动同时推送到两个服务器上，一个是公司内部服务器，另外一个是 IDC 机房托管的服务器。对数据的双机异地备份，再加上笔记本上的一个备份，这应该说是数据安全的极致了吧。

**Android 研发**

如果您是谷歌 Android 项目的参与者，尤其是驱动开发和核心开发的参与者，必然要接触 Git, repo, 和 Gerrit。对于只是偶尔参考一下 Android 核心代码的 Android 应用开发开发人员，也需要对 repo 深入理解，这样才不致于每次为同步代码花掉一天的时间。

repo 是 Android 为了解决 Git 多版本库管理问题而设计的，Gerrit 是谷歌为了避免因分布式开发造成项目分裂而创造的工具，打造了 Android 独具一格的集中式管理模式。在本书分两章分别予以介绍，让读者能够融会贯通的使用这两款工具，甚至用这两款工具为自己的项目服务。我还为 repo 写了几个新的子命令可以实现脱离 Gerrit 提交，让 repo 拥有更广泛的应用领域。

**Subversion 用户**

商业软件研发团队因为需要精细代码授权不会轻易更换现有的 Subversion 版本控制系统，这种情况下 Git 依然大有作为。无论是因为出差在外，或是在家办公，或是因为开发团队分处异地，会遇到 Subversion 版本控制服务器无法访问或者速度较慢的情况。这时 git-svn 这一工具会将 Git 和 Subversion 完美结合在一起，既严格遵守了 Subversion 的授权规定，又可以自如的本地提交，当能够连接到 Subversion 服务器时，可以悠闲的喝着咖啡，等待一次性批量提交的完成。

我有几个项目（pySvnManager, Freemind-MMX）托管在 SourceForge 的 Subversion 服务器上，现在都是通过 git-svn 将其转化为本地的 Git 库然后再使用的。这样访问历史数据、代码比较、提交代码，再也不必因为网速太慢而望眼欲穿了。

**开源软件研究**

开源软件会帮助程序员打开视野，增加择业的砝码。Git 会帮助程序员打开进入开源软件之门，看看使用 Git 做版本控制工具的软件把：Linux kernel, Android, Debian, Fedora, GNOME, KDevelop, jQuery, Prototype, PostgreSQL, Ruby on Rails, ... 太多太多。还不要忘了所有的 Subversion 版本库都可以用 Git 方式更好的进行访问。

**定制软件开发**

当一个公司的软件产品需要针对不同用户进行定制开发，就需要在一个版本库中建立大量的特性分支，使用 Subversion 的分支管理远不如用 Git 的分支管理那么自然和方便。

还有一个领域就是对第三方代码进行维护。当使用 Subversion 进行版本控制时，最自然的选择是卖主分支，而一旦定制开发愈加深入和上游的偏离也越大，和上游代码的合并将痛苦不堪。在 Git 的应用模型部分会介绍 Topgit 这一杀手级工具，是这个领域最佳的解决方案。

**系统管理员和版本控制管理员**

在本书的 Git 其他应用章节，会介绍我开发的一款基于 Git 的备份工具，让 Linux 系统的数据备份易如反掌。对于版本控制管理员，本书的 Git 服务器搭建和版本库迁移为更好的进行版本库管理提供了指引。


阅读指引
********

如果您还不了解版本控制，本书第一部分的第一章向您介绍版本控制系统的前世和今生。如果您还没有打定主意是否使用 Git，第二章“爱上 Git 的理由”也许能把您说服。

如果您是 Windows 的用户，安装 Git 和本书介绍的其他相关工具可能会遇到障碍，本书的第八部分就是为您准备的。

第二部分和第三部分的内容，会帮助您由浅入深的了解 Git。

如果只是了解了 Git 的基本用法，在实际工作中可能仍然会感到茫然无助，不知道如何组织和参与一个项目。第四部分 Git 协同模型就是为您展示各种各样类型的项目中是如何使用 Git 的。从常用的集中式和分布式的协同模型，还介绍了多版本库协同，其中以 Android 的多版本库协同模型最为典型。还介绍定制开发中的杀手级工具 Topgit 的使用模型。对 git-svn 的介绍会让您可以自如的用 Git 操作 Subversion 数据库。

使用 Git 版本控制工具，人人都是管理者，搭建 Git 服务器也并不再仅仅是系统管理员的职责。在自己的电脑上搭建 Git 服务器就相当于建立了一个网盘，方便了自己 Git 版本库的同步。购买一个支持 SSH 登录的虚拟主机的价格已经非常低廉，可以很轻松的实现拥有异地专属 Git 服务器的梦想。当然还有一些免费的 Git 托管服务可供选择。在本书的第五部分 —— Git 服务器搭建，会介绍最新的智能 HTTP 服务器搭建，以及传统的 git-daemon, gitweb 服务器搭建。还会介绍改进后的 Gitolite 和 Gitosis。这部分的最后一章将介绍 Android 项目的 Gerrit 服务器的使用以及探讨如何在自己的项目中引入评审机制。

如果您正打算将现有的版本控制系统迁移到 Git 服务器，第六部分的内容会带给您帮助。

Git 的核心是一个灵巧的内容追踪的文件系统，可以用于代码管理之外的领域。在第七部分向您介绍几个软件展示 Git 的神奇应用。

排版约定
********

$ 代表 Linux 下的提示符。

...



反馈和示例下载
**************

本书的 Bug 报告和勘误:

    http://redmine.ossxp.com/redmine/gitbook/

示例下载：

    http://www.ossxp.com/gitbook/


致谢
####

TODO
