前言
####

版本控制是管理数据变更的艺术，无论数据变更是来自同一个人，还是来自不同的人（一个团队）。版本控制系统不但要忠实记录每一次数据变更，还要能够还原任何历史改动，以及实现团队的工作协同等。Git 就是版本控制系统中的佼佼者。

我对版本控制系统的兴趣源自于我的个人知识管理实践，其核心就是撰写可维护的文档，并保存于版本控制系统中。可维护的文档格式可以是 DocBook、FreeMind、reStructuredText 等。我甚至还对 FreeMind 加以改造以便让其文档格式更适合于版本控制系统，这就是我的第一个开源实践：托管于 SourceForge 上的 FreeMind-MMX 项目。文档的书写格式问题解决之后，就是文档的存储问题了。通过版本控制系统，很自然地就可以实现对文档历史版本的保存，但是如何避免因为版本控制系统瘫痪而导致数据的丢失呢？Git 用其崭新的分布式版本控制设计提供了最好的解决方案。使用 Git，我的知识库不再只有唯一的版本库与之对应，而是可以通过克隆操作分发到不同的磁盘上、主机上，克隆的版本库相互之间通过推送（PUSH）和拉回（PULL）等操作相同步，数据安全得到了极大的提升。在版本控制系统的忠实呵护下，我的知识库中关于 Git 的脑图（FreeMind）日积月累变得越来越庞大、越来越清晰，最终成为这本书的雏形。 


版本控制还能决定项目的成败甚至公司的生死，此言不虚。我在推广开源的项目管理工具和企业顾问咨询过程中，看到过太多的团队，因为版本控制系统的管理混乱，导致项目延期，修正的 Bug 重现，客户的问题不能在代码中定位，无论他们用了什么版本控制系统，开源的还是商业的。而我的公司也同样经历了代码管理的生死考验。因为公司的开发模式主要是基于开源软件的二次开发，在最早使用 SVN (Subversion) 做版本控制时，很自然使用了 SVN 卖主分支的模型来管理代码。随着增加和修改的越多，和开源软件的上游分支也越远，当上游有新版本出来，最早可能用几个小时就把改动迁移过去，但当对上游的改动多达几十甚至上百处，迁移的过程异常痛苦，基本上和重新做一遍差不多。似乎那时只有一个选择：不再和上游合并，不再追踪上游的改动，而这和公司的价值观“发动全球智慧为客户创造价值”相背。迷茫之中， 分布式版本控制系统飘然而至，原来版本控制还可以这么做。

最先尝试的分布式版本控制系统是 Hg（Mercurial），尤其是当发现 Hg 和 MQ（Hg 的一个插件）这一对儿宝贝的时候，让我们如获至宝。逐渐的，公司的版本库都迁移到 Hg 上。但随着公司新的开发人员的加入，新的问题出现了，即一个人使用 Hg+MQ 都很好，但多个人使用时无法协同的弊端也就显现了。于是大胆的采用 Git，并在实践中结合 Topgit 等工具进行代码的管理。再一次，也许是最后一次，我们的代码库迁移到 Git。

最早发现分布式版本控制，源自于我们发现开源软件版本控制大迁移，这场迁移还在进行中。

* MoinMoin 是我们关注的一个开源的维基软件，2006 年，它由 SVN 迁移到 Hg 做版本控制系统。 [#]_
* Mailman 同样是我们关注的一个开源邮件列表软件。2007 年，它的代码从 SVN 迁移到 Bazaar。 [#]_
* Linux 采用 Git 做版本控制系统（一点都不奇怪，因为Git就是 Linus Tolvals 开发的）。
* Android 是最为流行的开源项目之一，因为潜在的市场巨大，已经吸引越来越多的开发者进入这个市场，而 Android 就是用 Git 维护的。

.. [#] http://moinmo.in/NewVCS
.. [#] http://wiki.list.org/display/DEV/Home

当开源软件纷纷倒向分布式版本控制系统的大旗（尤其是Git）的时候，公司也在行动了，尤其是涉及异地团队协同，以及 Android 核心代码定制开发的公司。对于一些因保守而不敢向 Git 靠拢的公司，Git 也可以派上用场，这是因为 Git 可以和现在大多数公司部署的 SVN 很好的协同，即公司的服务器是 SVN，开发者的客户端使用 Git。相信随着 Git 的普及，以及公司代码管理观念上的开放，相信会有更多的公司拥抱 Git。

本书的结构
************

本书共分8篇41章及附录。

第1篇是 Git 的概览，共分3章。在第1章介绍了版本控制的历史之后，第2章用十来个小例子介绍了一些 Git 的闪亮功能，期待这些特色功能能够让读者爱上 Git。在第3章介绍了 Git 在三种主要的平台上的安装和使用。本书写作过程中，70% 的时间是使用 Debian Linux 操作系统，对于 Linux 用户可以毫无障碍的完成本书列举的所有相关操作。在 2010 年底，当得知有出版社肯以稿费支持本书的首印后，我向妻子阿巧预支未来的部分稿费购进了我的第一台 MacBook Pro，于是就有了本书较为详实的 Mac OS X 下 Git 的安装和使用，以及在本书第4篇第22章介绍的 Topgit 在 Mac OS X 的部署和改进。在本书编辑和校对过程中因为要使用 Word 格式的文稿，所以本书后期很多工作是在运行于 VirtualBox 虚拟机下的 Windows 中完成的，即使是使用运行于资源受限的虚拟机中的 Cygwin，Git 依然完美的完成了工作。

第2篇和第3篇介绍 Git 的基本操作，是本书的核心和重点，篇幅占据全书大约百分之四十。之所以放在两篇讲述是我在 SVN 培训时就已经形成的习惯，即以“独奏”指代一个人的版本控制所要讲述的知识点，以“和声”指代团队版本控制涉及到的话题。在第2篇Git独奏中将 Git 的设计原理穿插在各章之中，因为唯有了解真相（Git原理），才有可能自由（掌握Git）。在第3篇Git和声中，介绍团队版本控制必须掌握的里程碑和分支等概念，以及如何解决合并中遇到的冲突。

第4篇介绍在实际的工作中 Git 的使用模式。除了传统的集中式和分布式使用模式之外，在第22章介绍了 Topgit 在定制开发中的应用，这也是我公司最主要的使用 Git 的模式。在这一章还介绍了我对 Topgit 所做的部分改进，而这些内容最早出现自我公司上的博客。第23-25章介绍了多版本库协同的不同方法，其中第25章介绍的一个独辟蹊径的解决方案是由 Android 项目引入的 repo 工具实现的，我对其进行的改造可以让这个工具能够脱离 Gerrit 代码审核服务器，直接操作 Git 服务器。第26章介绍了 git-svn 这一工具，不但可以用该工具实现 SVN 版本库到 Git 版本库的迁移，还可以实现 Git 做为客户端向 SVN 提交。

第5篇介绍 Git 服务器的架设。本篇实际上是全书最早开始撰写的部分，这是因为我给客户做的 Git 培训讲义的相关部分不够详细，应客户要求对 Gitolite 等服务器架设撰写详细的管理员手册，就是本书的第30章。第32章介绍 Android 项目在 Git 管理上的又一大创造，即 Gerrit，它实现了一个独特的集中式 Git 版本库管理模型。

第6篇介绍 Git 版本库的迁移。其中第34章详悉介绍了 CVS 版本库到 Git 版本库的迁移，其迁移过程也可以作为 CVS 到 SVN 迁移的借鉴。本篇还介绍了 SVN 和 Hg 版本库到 Git 的迁移。对于其他类型的版本库，还介绍了一个更为通用的方法。在本篇的最后介绍了一个 Git 版本库整理的利器，可以理解为一个 Git 库转换为另外一个 Git 库的方法。

第7篇介绍 Git 的其他应用，其主要部分是介绍我在 etckeeper 启发下开发的一款备份工具 Gistore，该工具可以运行于 Linux 和 Mac OS X 下。

第8篇称为 Git 杂谈。其中第40章的内容供跨平台项目借鉴。第41章则介绍一些前面没有涉及到的 Git 相关功能和特性，缺少这些相关内容会有损于杨福川编辑为本书所起的宏大的书名。

第9篇附录，先是介绍 Git 的完全命令索引，然后分别介绍 CVS、SVN、Hg 和 Git 之间的比较和命令对照，对于有着其他版本控制系统使用经验的用户，这一部分可供参考。

适用读者
********

这本书适合所有拿起它的人，因为我知道这本书在书店里一定是放在计算机图书专柜。

**为数据同步困扰的电脑人**

困扰“电脑人”的一个问题是，有太多的数据和太多的电脑设备，数据要在各个电脑（或手持设备）之间进行同步。可能有的人会说：“像 Dropbox 一样的网盘可以帮助我呀”。是的，云存储就是在技术逐渐成熟之后应运而生的产品，但是依然解决不了几个问题：多个设备上同时修改造成的冲突；冗余数据传输造成的带宽瓶颈；还有就是没有实现真正的完全的历史变更数据备份，详见第7篇相关内容。

Git 可以在数据同步上做的更好，甚至只需借助小小的U盘，就可以实现多台电脑数据同步，并且支持自动的冲突解决。只要阅读本书第1、2篇，就会掌握相关操作，实现数据的版本控制和同步。

**和计算机打交道的学生**

我非常后悔没有在学习编程的第一天就开始使用版本控制，很多还在学校时写的一些小程序、函数库都丢失了。在使用 CVS, SVN 对个人数据进行版本控制之后，才开始把每一天的变更历史都保留下来。Git 在这方面可以比 CVS, SVN 等做得更好。

在通过本书前3篇掌握了 Git 基础之后，可以阅读第5篇第33章的内容，通过 Github 或类似的服务提供商建立自己的版本库托管，为自己的数据找一个安全的家。

**修炼中的程序员**

开源软件会帮助程序员打开视野，提升水平，增加择业的砝码，而 Git 会帮助程序员打开进入开源软件之门。看看使用 Git 做版本控制工具的软件吧：Linux kernel, Android, Debian, Fedora, GNOME, KDevelop, jQuery, Prototype, PostgreSQL, Ruby on Rails, ... 太多太多。还不要忘了所有的 SVN 版本库都可以用 Git 方式更好的进行访问。

做为一个程序员，团队协同能力必不可少，本书第3篇应该做为学习的重点。

**Android 开发**

如果您是谷歌 Android 项目的参与者，尤其是驱动开发和核心开发的参与者，必然要接触 Git, repo, 和 Gerrit。对于只是偶尔参考一下 Android 核心代码的 Android 应用开发开发人员，也需要对 repo 深入理解，这样才不致于每次为同步代码花掉一天的时间。

repo 是 Android 为了解决 Git 多版本库管理问题而设计的，在本书第4篇第25章予以介绍。

Gerrit 是谷歌为了避免因分布式开发造成项目分裂而创造的工具，打造了 Android 独具一格的集中式管理模式，在本书第5篇第32章予以介绍。

即使是非 Android 项目，也可以使用这两款工具为自己的项目服务。我还为 repo 写了几个新的子命令可以实现脱离 Gerrit 提交，让 repo 拥有更广泛的应用领域。

**定制软件开发**

当一个公司的软件产品需要针对不同用户进行定制开发，就需要在一个版本库中建立大量的特性分支，使用 SVN 的分支管理远不如用 Git 的分支管理那么自然和方便。

还有一个领域就是对第三方代码进行维护。当使用 SVN 进行版本控制时，最自然的选择是卖主分支，而一旦定制开发愈加深入和上游的偏离也越大，和上游代码的合并将痛苦不堪。在第4篇“Git的应用模型”中会介绍 Topgit 这一杀手级工具，是这个领域最佳的解决方案。

**SVN 用户**

商业软件研发团队因为需要精细代码授权不会轻易更换现有的 SVN 版本控制系统，这种情况下 Git 依然大有作为。无论是因为出差在外，或是在家办公，或是因为开发团队分处异地，会遇到 SVN 版本控制服务器无法访问或者速度较慢的情况。这时 git-svn 这一工具会将 Git 和 SVN 完美结合在一起，既严格遵守了 SVN 的授权规定，又可以自如的本地提交，当能够连接到 SVN 服务器时，可以悠闲的喝着咖啡，等待一次性批量提交的完成。

我有几个项目（pySvnManager, Freemind-MMX）托管在 SourceForge 的 SVN 服务器上，现在都是通过 git-svn 将其转化为本地的 Git 库然后再使用的。这样访问历史数据、代码比较、提交代码，再也不必因为网速太慢而望眼欲穿了。

本书第4篇第26章会向您详细介绍 Git 和 SVN 的互操作。

**管理员**

在本书第7篇第37章介绍了一款我开发的基于 Git 的备份工具，让 Linux 系统的数据备份易如反掌。对于版本控制管理员，本书第5篇介绍的 Git 服务器搭建，以及第6篇介绍的版本库迁移提供了相关指引。

**开发经理**

做为开发经理应当对代码分支有着深刻的理解，本书第18章中的代码管理之殇，不知是否能引起您的共鸣。为了能在各种情况下恰当的管理开发团队，第4篇Git协同模型是项目经历关注的重点。您的团队是否存在着跨平台开发，或者潜在着跨平台开发的可能？本书第8篇第40章也是开发经理关注的章节。

排版约定
********

$ 代表 Linux 下的提示符。

...



在线资源
**************

http://www.ossxp.com/gitbook/


致谢
####

TODO
