前言
####

.. 真相让你自由。代码恰恰能够反映软件的真相。

版本控制是数据维护的艺术。每个人都可以用它记录自己数据变更的历史，在不同的计算机间同步数据。当然，版本控制最初的设计意图以及目前应用最广泛的领域还是软件开发中的源代码管理。

版本控制可以影响程序员的水平，决定公司的生死。我没有丝毫的夸大。

作为一个程序员，你是不是也憧憬着光荣退休的那一天。你可以翻看着自己维护的版本库的历史，给你的下一代或者下下代讲述你作为程序员的故事。你也可以利用自己维护的版本控制系统来写自传，因为版本控制系统忠实的记录了你做为程序员时时刻刻都做了些什么。你不知道版本库为何物？或者你认为版本库只应该是公司的特权？抑或怀疑自己能否搭建自己的版本库？那么这本书就是为你而写的。

如果你也如我这般，用版本控制系统（Git）维护文档（FreeMind 或者 reST 格式），日益庞大的文档、日益清晰的脉络，有朝一日，你也可以向我一样写本书。

眼前对你最为紧迫的可能是，能否尽快退休，当然是在你修炼成顶级程序员之后。那么版本控制系统也能帮你这个忙。熟悉版本控制系统，开源软件为你敞开了大门。你尽可以从无数的开源项目中吸取营养和灵感。

版本控制还能决定公司的生死，此言不虚。

作为版本控制的咨询师，我看到太多的团队，因为版本控制系统的管理混乱，导致项目延期，修正的 Bug 重现，客户的问题不能在代码中定位。无论他们用了什么版本控制系统，开源的还是商业的。

而我在 2005 年创立的北京群英汇信息技术有限公司，也同样经历了代码管理的生死考验。因为我们是基于开源软件的二次开发，在最早使用 Subversion 时（ **集中式版本控制系统** 的典型代表），很自然，我们使用 Subversion 卖主分支的模型来管理代码，我们增加和修改的越多，我们和开源软件的上游分支也越远。当上游有新版本出来，最早我们可能用几个小时就把我们的改进迁移过去，但当我们的改动多达几十甚至上百处，迁移的过程异常痛苦，基本上和重新做一遍差不多。似乎那时只有一个选择：不再和上游合并，不再追踪上游的改动，而这和我们公司的价值观“发动全球智慧为客户创造价值”相背。迷茫之中， **分布式版本控制系统** 飘然而至，原来版本控制还可以这么做。

我们最早尝试的分布式版本控制系统是 Mercurial/Hg，我们发现 Hg 和 MQ 插件一起用，可以让我们的软件定制开发模型更方便、可控。逐渐的，群英汇的版本库都迁移到 Mercurial/Hg。但随着公司新的开发人员的加入，新的问题出现了，即一个人使用 Hg+MQ 都很好，但多个人使用，无法协同的弊端也就显现了。于是我们大胆的采用 Git，并在实践中结合 Topgit 等工具进行代码的管理。再一次，也许是最后一次，我们的代码库迁移到 Git。

最早发现分布式版本控制，源自于我们发现开源软件版本控制大迁移，这场迁移还在进行中。

* MoinMoin 是我们关注的一个开源的维基软件，2006 年，它由 Subversion 迁移到 Mercurial/Hg 做版本控制系统。 [#]_
* Mailman 同样是我们关注的一个开源邮件列表软件。2007 年，它的代码从 Subversion 迁移到 Bazaar。 [#]_
* Linux 采用的 Git 做版本控制系统（一点都不奇怪，因为Git就是 Linux Tolvals 开发的）。

  最酷的是，使用 Git 克隆整个 Linux 的源码库，只要花上几十分钟（1M带宽），就可以获得全部（2.2 之后）的 Linux 版本，可以随心所欲的通过本地检出、编译切换到任何版本的内核，而新版本内核出来后，也不必下载内核压缩包，只要更新 Git 库(git pull)，新内核的源码包括之间修改历史全部呈现眼前。

* Android 是最为流行的开源项目之一，因为潜在的市场巨大，已经吸引越来越多的开发者进入这个市场，而 Android 就是用 Git 维护的。

  Android 的版本库异常庞大和复杂，涉及到一百多个 Git 库，谷歌甚至开发了一个叫 repo 的工具对 Git 进行一定的封装。

.. [#] http://moinmo.in/NewVCS
.. [#] http://wiki.list.org/display/DEV/Home

开源软件纷纷倒向分布式版本控制系统的大旗（尤其是Git）的时候，公司也在行动了，尤其是涉及 Android 核心代码开发的公司。对于因为代码严格授权需要，并不能采用 Git 的公司，Git 也可以派上用场。这是因为 Git 可以和现在大多数公司部署的 Subversion 很好的协同。即公司的服务器是 Subversion，开发者的客户端使用 Git。而且随着公司代码管理观念上的开放，我相信会有更多的公司拥抱 Git。

适用读者
========
每个人都可以使用Git。


以Git为代表的分布式版本控制系统是版本控制系统的巨大变革，，如果你是

本书的主要篇幅，介绍 Git。其中也有部分内容涉及到 CVS， Subversion 等版本控制系统， 原因是: 1. 大部分读者已经熟悉了 CVS 或者 Subversion， 2. 商业软件公司必然涉及到源码的保护，内部使用 Subversion 的可能性更大，如何在不放弃 SVN 的情况下使用 Git，我会专门辟出一章加以介绍。


阅读指引
========
本书的主要篇幅，介绍 Git。其中也有部分内容涉及到 CVS， Subversion 等版本控制系统， 原因是: 1. 大部分读者已经熟悉了 CVS 或者 Subversion， 2. 商业软件公司必然涉及到源码的保护，内部使用 Subversion 的可能性更大，如何在不放弃 SVN 的情况下使用 Git，我会专门辟出一章加以介绍。



排版约定
========

$ 代表 Linux 下的提示符。


示例下载
========


