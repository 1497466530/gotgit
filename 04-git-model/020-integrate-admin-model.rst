金字塔式协同模型
==================

自从分布式版本库控制系统（Mercurial/Hg, Bazaar, Git 等）诞生之后，有越来越多的开源项目迁移了版本控制系统，从 Subversion 或 CVS 迁移到分布式版本控制系统。因为众多的开源项目逐渐认识到，集中式的版本控制管理方式阻止了更多的人参与项目的开发，对项目的发展不利。

集中式版本控制系统的最大问题是，如果没有在服务器端授权，就无法提交，也就无法保存自己的更改。开源项目虽然允许所有人访问代码库，但是不可能开放“写操作”授权给所有的人，否则代码质量无法控制（Gerrit 审核服务器是例外）。于此相对照的是，在使用了分布式版本控制系统之后，任何人都可以在本地克隆一个和远程版本库一模一样的版本库，本地的版本库允许任何操作，这就极大的调动了开发者投入项目研究的积极性。

分布式的开发必然带来协同的问题，如何能够让一个素不相识的开发者将他的贡献提交到项目中？如何能够最大化的发动和汇聚全球智慧？开源社区逐渐发展出金字塔模型，而这也是必然之选。

  .. figure:: images/git-module/distrabute-model.png
     :scale: 100

     金字塔式的协同模型

金字塔模型的含义是，虽然理论上每个开发者的版本库都是平等的，但是会有一个公众认可的权威的版本库，这个版本库由一个或者多个核心开发者负责维护（具有推送的权限）。核心的开发人员负责审核其它贡献者的提交，审核可以通过邮件传递的补丁或者访问（pull）贡献者开放的代码库进行。由此构成了由核心开发团队为顶层的所有贡献者共同参与的开发者金字塔。

Linux 社区就是典型的金字塔结构。Linus Torvalds 的版本库被公认为是官方的版本库，允许核心成员的提交。其它贡献者的提交必须经过一个或多个核心成员的审核后才能经由核心成员代为推送的到官方版本库。

采用这种金字塔式协同模型不需要复杂和 Git 服务器设置，尤其是贡献者只需要提供一个只读的 Git 库就可以了。在下一部分服务器架设的相关章节，会介绍 http 和 git-daemon 两种最简单的只读 Git 服务器的架设。

TODO:

git commit -s 为提交增加 SignOff by: 标识。

为了防止因忘记 git add 导致提交不完整，应该在提交完成后，执行 git status 查看是否有未提交的变更，再执行  git show HEAD 检查提交：改动和日志说明。


提交贡献的方式：共享版本库。git-daemon, http smart server 可以帮助你。或者直接用 github。

通过 patch 文件。

* git apply /tmp/patch-ruby-client.patch
* git apply --check 0001-seeing-if-this-helps-the-gem.patch 

cherry-pick: 将特性分支的某个提交贡献。

