云存储
======

通过云存储，将个人数据备份在网络上是非常吸引人的服务，比较著名的公司或产品有 dropbox, surgarsync, Live Mesh, Syncplicity 等。这些产品的特点是能够和操作系统的 shell 整合，例如和 Windows 的资源管理器或者 Linux 上的 nautilus，当本地有数据改动会自动的同步到远程的“云存储”上。用户可以在多个计算机或者手持设备上配置和同一个“云端”的帐号同步，从而实现在多个计算机或者多个手持设备上的数据同步。

我并未使用过上述服务，主要是支持 Linux 操作系统的云存储客户端比较少，或者即使有也因为某些原因而无法访问。但是通过相关文档，还是可以了解到其实现的机理。

* 仅支持对部分历史数据的备份。

  dropbox 支持30天数据备份，surgarsync 每个文件仅保留5个备份（付费用户），对于免费用户仅2个备份。

* 数据同步对网络带宽依赖比较高。

* “云端”被多个设备共享，冲突解决比较困难。

  Surgarsync 会将冲突的文件自动保存为多份，造成磁盘空间超出配额。其它有的产品在遇到冲突时停止同步，让用户决定选择哪个版本。

通过上述的功能描述，感觉部分产品在数据同步时使用的机理类似 rsync, unison 等 Linux 下的数据同步工具。至于这些产品在服务器端如何实现可能就五花八门了。

我相信 Git 在这一领域内也可以大显身手。

**差异同步传输**

对用户体验最为关键的是网络传输，如果用 Git 可以在同步时实现仅对文件差异进行数据传输，会大大提高同步效率。之所以现有的在线备份系统实现不了“差异同步传输”，是因为没有在本地对上一次同步时的数据做备份，只能通过时间绰或者文件的哈希值判断文件是否改变，而无法得出文件修改前后的差异。

可以很容易的测试云存储软件的网络传输性能。准备一个大的压缩包（使同步时压缩传输可以忽略），测试一下同步时间。再在该文件后面追加几个字节，然后检查同步时间。比较前后两个时间，就可以看出同步是否实现了仅对差异的同步传输。

**云端文件存储效率**

很容易试验各种云存储解决方案的存储效率，在本地将一个大文件拷贝 N 份，然后执行同步，如果最终“云端”给出存储空间超出配额，就说明云端的数据存储实现上有问题。

Git 底层实现了一个对内容跟踪的文件系统，相同内容的文件即使文件名和目录不同，在 Git 看来都是一个对象并用一个文件存储（文件名是内容相关的 SHA1 哈希值）。

**自动的冲突解决**

冲突解决是和文件同步相关的，只有通过“差异同步传输”解决了同步的性能瓶颈，才能为冲突解决打下基础。先将冲突的各个版本都同步到本地，然后进行自动冲突解决，如果解决不了，再提示用户手工冲突解决。如果在手工冲突解决是引入类似 kdiff3 一样的工具，对用户更有吸引力。

**存储空间的管理**

使用 Git 实现云存储，可能遇到最主要的问题是服务器端以及客户端空间占用的问题，随着备份越来越多 Git 库的占用也越来越大。对于服务器端，可以采用前面介绍的 Gistore 软件采用的重整版本库的方法，或者通过基于历史版本重建提交然后变基来实现提交数量的删减。对于客户端来说，只保留一个提交就够了，这就需要在客户端基于 Git 原理的重新实现。

**Git 提交中引入特殊标识**

上面提到通过变基实现备份数量的删减，就会遇到云端的提交和本地提交的合并问题，采用 Gerrit 类似的实现在提交说明中引入唯一标识是一个解决方案。

我相信，基于 Git 的文件系统以及传输机理可以实现一个更好用的云存储服务。
